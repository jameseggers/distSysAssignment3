
==================== FINAL INTERFACE ====================
2016-11-28 16:52:35.027205 UTC

interface main@main:Main 8001
  interface hash: 2b8ded934b7be6af83b551def5d6de8a
  ABI hash: 460340f4521e99d0ed21078511a73992
  export-list hash: 2bcee355f4028c51161d4f50924d71ef
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5a8008075d597e82966edd93f13cccaa
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.addNewSocket
  Main.dealWithChannelMessage
  Main.getChatResponseMessage
  Main.getJoinedRoomMessage
  Main.getValue
  Main.handleChat
  Main.handleJoinChatroom
  Main.handleLeaveChatroom
  Main.listenForMessagesFromOthers
  Main.main
  Main.numberOfActiveSockets
  Main.parseMessage
  Main.readAsInt
  Main.runServer
  Main.waitForConnection
  Main.Message{Main.Message chatroomToJoin chatroomToLeave clientIp clientName errorCode errorDescription joinId joinedChatRoom leftChatroom messageText messageType port roomRef}
  Main.Msg
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-Ctl752zbguF6QanxurLOm2
                      integer-gmp-1.0.0.1
                      network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG
                      network-info-0.2.0.8@network-info-0.2.0.8-86rzpOQvMAKDGx0U3gGJUk
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
                      text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs
                      time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-Ctl752zbguF6QanxurLOm2:Data.Hashable.Generic
         network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text
                         text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Lazy
import  -/  base-4.9.0.0:Control.Concurrent 98a3a12a2ace3d27758947d9f1041f90
import  -/  base-4.9.0.0:Control.Concurrent.Chan d55a50c16a7726146797e8faa62a516b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Conc.Sync 800ad52ae188c67fd514a07ba8a64fcc
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO ad985d7a3fc986e9b9c610fb344d9106
import  -/  base-4.9.0.0:System.IO.Unsafe e698988c221572efd6def186307a53e1
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  hashable-1.2.4.0@hashable-1.2.4.0-Ctl752zbguF6QanxurLOm2:Data.Hashable 86e6b0bacabf7972207b4da69b1c6f38
import  -/  hashable-1.2.4.0@hashable-1.2.4.0-Ctl752zbguF6QanxurLOm2:Data.Hashable.Class 6b3d1c87f94d6af2ec4a419dee4d1ddd
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket 16daba302e6d1376ace8d6bc8354708f
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.Internal 6670c66c398fead19fd25cb50e6956e6
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.Types c045bc4119b787ed28c457fa81ec4a37
import  -/  network-info-0.2.0.8@network-info-0.2.0.8-86rzpOQvMAKDGx0U3gGJUk:Network.Info 0dc6d40043230aba5c7d932576989bc9
import  -/  random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe:System.Random 33fad628288f84aac16d40e5a027af06
import  -/  split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke:Data.List.Split 46e8ab9554123893f27696c65d88e63d
import  -/  split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke:Data.List.Split.Internals 91fdfee0190d7e76d57defeef91ab9d3
import  -/  text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text 1e73069de2859bae8530c14767b0c6af
import  -/  text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Internal bfb0ec5fde448272375be97e2314e47b
import  -/  text-1.2.2.1@text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs:Data.Text.Show f1f9b8deb132e3cc6c9369ebd9da68d2
7dc388a818890158b9026eb095a87830
  $fShowMessage :: GHC.Show.Show Main.Message
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Message
                  Main.$fShowMessage_$cshowsPrec
                  Main.$fShowMessage_$cshow
                  Main.$fShowMessage_$cshowList -}
7dc388a818890158b9026eb095a87830
  $fShowMessage1 :: Main.Message -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.Message) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Message ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ->
                 Main.$w$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   w1 }) -}
7dc388a818890158b9026eb095a87830
  $fShowMessage_$cshow :: Main.Message -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U,U,U),1*U(U,U,U),1*U(U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U),1*U(U),1*U(U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Message) ->
                 Main.$fShowMessage_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7dc388a818890158b9026eb095a87830
  $fShowMessage_$cshowList :: [Main.Message] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Message
                   Main.$fShowMessage1) -}
7dc388a818890158b9026eb095a87830
  $fShowMessage_$cshowsPrec ::
    GHC.Types.Int -> Main.Message -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U),1*U(U,U,U),1*U(U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U),1*U(U),1*U(U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Message)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Message ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 Main.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   w2 } }) -}
1a361c73026fda0f1d7f7bfaf0295724
  $tc'Message :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   484312489755016824##
                   13197764062834505629##
                   Main.$trModule
                   Main.$tc'Message1) -}
949aff41dcd0bdb52a198738e7cb1133
  $tc'Message1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Message"#) -}
a317a2b68abab7bca30880bdf39d36dc
  $tcMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11750200497582023075##
                   1107912994446066806##
                   Main.$trModule
                   Main.$tcMessage1) -}
9d158e0a5fe47b777c8610b9e6ae8f21
  $tcMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Message"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
cace0142d5b3f9fdcad62ddda8fb9ba4
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Types.Int
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 15,
     Strictness: <S,U><L,1*U(U,U,U)><L,1*U(U,U,U)><L,1*U(U)><L,1*U(U,U,U)><L,1*U(U,U,U)><L,1*U(U,U,U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U,U,U)><L,1*U(U,U,U)><L,1*U(U,U,U)><L,1*U(U,U,U)><L,U>,
     Inline: [0] -}
682e83a424fa6b6b0fc1eb67189e547f
  $waddNewSocket ::
    Network.Socket.Types.Socket
    -> [Network.Socket.Types.Socket]
    -> GHC.Prim.Int#
    -> [Network.Socket.Types.Socket]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Network.Socket.Types.Socket)
                   (w :: [Network.Socket.Types.Socket])
                   (ww1 :: GHC.Prim.Int#) ->
                 case GHC.List.$wlenAcc
                        @ Network.Socket.Types.Socket
                        w
                        0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww2 ww1) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ Network.Socket.Types.Socket
                        w
                        (GHC.Types.:
                           @ Network.Socket.Types.Socket
                           ww
                           (GHC.Types.[] @ Network.Socket.Types.Socket))
                   GHC.Types.True -> w } }) -}
52ee3087a32a092fbc91ca9ca816dcc2
  $wdealWithChannelMessage ::
    Network.Socket.Types.Socket
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U(U(U),A,A,A,A)><L,U><L,U><S,U><L,1*U(U,U,U)><L,1*U(U,U,U)><L,U(U)><L,U(U)><L,1*U(U,U,U)><S,U>,
     Inline: [0] -}
3eba88a006e954ba6b046f4456280463
  $whandleChat ::
    GHC.Base.Maybe Main.Message
    -> Control.Concurrent.Chan.Chan Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U(1*U,U)><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Base.Maybe Main.Message)
                   (w1 :: Control.Concurrent.Chan.Chan Main.Message)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of wild {
                   GHC.Base.Nothing -> (# w2, GHC.Tuple.() #)
                   GHC.Base.Just ipv
                   -> case w1 of wild1 { Control.Concurrent.Chan.Chan dt dt1 ->
                      case GHC.Prim.readMVar#
                             @ GHC.Prim.RealWorld
                             @ (Control.Concurrent.Chan.Stream Main.Message)
                             dt1
                             w2 of ds7 { (#,#) ipv1 ipv2 ->
                      case GHC.Prim.newMVar#
                             @ GHC.Prim.RealWorld
                             @ (Control.Concurrent.Chan.Stream Main.Message)
                             ipv1 of ds8 { (#,#) ipv3 ipv4 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ (Control.Concurrent.Chan.Stream Main.Message)
                             ipv4
                             ipv2
                             ipv3 of s2# { DEFAULT ->
                      case Control.Concurrent.Chan.$wwriteChan
                             @ Main.Message
                             dt
                             dt1
                             ipv
                             s2# of ds9 { (#,#) ipv5 ipv6 ->
                      (# ipv5, GHC.Tuple.() #) } } } } } }) -}
ac798cb17d419259ad7f13deee277415
  $wlistenForMessagesFromOthers ::
    Network.Socket.Types.Socket
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld (Control.Concurrent.Chan.Stream Main.Message)
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld (Control.Concurrent.Chan.Stream Main.Message)
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(U(U),A,A,A,A)><S,U><S,U><L,U(U)><S,U>,
     Inline: [0] -}
ec33fda3e39f239787ac4548363a1be4
  $wouter ::
    Data.Text.Array.MArray GHC.Prim.RealWorld
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><S,U><S,U>,
     Inline: [0] -}
e30bdb10322ec3f1327d1782a026747b
  $wrunServer ::
    Foreign.C.Types.CInt
    -> GHC.MVar.MVar Network.Socket.Types.SocketStatus
    -> Control.Concurrent.Chan.Chan Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><L,U(U,U)><S,U>,
     Inline: [0] -}
66b330280486323a1fd8be0671195fa3
  $wwaitForConnection ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> Control.Concurrent.Chan.Chan Main.Message
    -> [Network.Socket.Types.Socket]
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <L,U(U)><S,U><L,U><L,U(U)><S,U><L,U(U,U)><L,U><L,1*U(U)><S,U>,
     Inline: [0] -}
7dc388a818890158b9026eb095a87830
  data Message
    = Message {messageType :: Data.Text.Internal.Text,
               clientIp :: Data.Text.Internal.Text,
               port :: GHC.Types.Int,
               clientName :: Data.Text.Internal.Text,
               chatroomToJoin :: Data.Text.Internal.Text,
               joinedChatRoom :: Data.Text.Internal.Text,
               roomRef :: GHC.Types.Int,
               joinId :: GHC.Types.Int,
               errorCode :: GHC.Types.Int,
               errorDescription :: Data.Text.Internal.Text,
               chatroomToLeave :: Data.Text.Internal.Text,
               leftChatroom :: Data.Text.Internal.Text,
               messageText :: Data.Text.Internal.Text}
984414f2a8dffe167650711ce575fcbb
  type Msg = GHC.Base.String
0b8c12b27d421ecde882d97a1b7642fc
  addNewSocket ::
    (Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)
    -> [Network.Socket.Types.Socket]
    -> GHC.Types.Int
    -> [Network.Socket.Types.Socket]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(U,A)><S,U><S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: (Network.Socket.Types.Socket,
                          Network.Socket.Types.SockAddr))
                   (w1 :: [Network.Socket.Types.Socket])
                   (w2 :: GHC.Types.Int) ->
                 case w of ww { (,) ww1 ww2 ->
                 case w2 of ww3 { GHC.Types.I# ww4 ->
                 Main.$waddNewSocket ww1 w1 ww4 } }) -}
cb1955bd22819b9cb470b8adcdc4b90d
  chatroomToJoin :: Main.Message -> Data.Text.Internal.Text
  RecSel Left Main.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLL),1*U(A,A,A,A,1*U(U,U,U),A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds7 :: Main.Message) ->
                 case ds7 of wild { Main.Message ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                 ds12 }) -}
20697a8e223119f2d1154fd542c1fd70
  chatroomToLeave :: Main.Message -> Data.Text.Internal.Text
  RecSel Left Main.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds7 :: Main.Message) ->
                 case ds7 of wild { Main.Message ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                 ds18 }) -}
aba58ce58a205cc16c7db690a442218d
  clientIp :: Main.Message -> Data.Text.Internal.Text
  RecSel Left Main.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLL),1*U(A,1*U(U,U,U),A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds7 :: Main.Message) ->
                 case ds7 of wild { Main.Message ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                 ds9 }) -}
f01ba2178ace53ed09c03d9b47d51e23
  clientName :: Main.Message -> Data.Text.Internal.Text
  RecSel Left Main.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLL),1*U(A,A,A,1*U(U,U,U),A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds7 :: Main.Message) ->
                 case ds7 of wild { Main.Message ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                 ds11 }) -}
9ae3af8c03a04c9fab5de4c3e39b00f9
  dealWithChannelMessage ::
    Network.Socket.Types.Socket
    -> Control.Concurrent.Chan.Chan Main.Message
    -> Main.Message
    -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,U(U(U),A,A,A,A)><L,A><S(S(LLS)LLLLLLLLLLLL),1*U(1*U(U,U,U),A,A,1*U(U,U,U),A,1*U(U,U,U),U(U),U(U),A,A,A,A,1*U(U,U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.dealWithChannelMessage1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <Control.Concurrent.Chan.Chan Main.Message>_R
                 ->_R <Main.Message>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ee1394162be13654842872b4804b9bbf
  dealWithChannelMessage1 ::
    Network.Socket.Types.Socket
    -> Control.Concurrent.Chan.Chan Main.Message
    -> Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U(U(U),A,A,A,A)><L,A><S(S(LLS)LLLLLLLLLLLL),1*U(1*U(U,U,U),A,A,1*U(U,U,U),A,1*U(U,U,U),U(U),U(U),A,A,A,A,1*U(U,U,U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: Control.Concurrent.Chan.Chan Main.Message)
                   (w2 :: Main.Message)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w2 of ww { Main.Message ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ->
                 case ww1 of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                 Main.$wdealWithChannelMessage
                   w
                   ww15
                   ww16
                   ww17
                   ww4
                   ww6
                   ww7
                   ww8
                   ww13
                   w3 } }) -}
e396d107404a9a01b7f846e853605b83
  errorCode :: Main.Message -> GHC.Types.Int
  RecSel Left Main.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds7 :: Main.Message) ->
                 case ds7 of wild { Main.Message ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                 ds16 }) -}
796566c0deb13571d400ce78341f9b66
  errorDescription :: Main.Message -> Data.Text.Internal.Text
  RecSel Left Main.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,1*U(U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds7 :: Main.Message) ->
                 case ds7 of wild { Main.Message ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                 ds17 }) -}
d3adeba1d2331c447a5f6fd9975a41de
  getChatResponseMessage :: Main.Message -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*U(U,U,U),A,A,1*U(U),A,A,A,A,A,1*U(U,U,U))> -}
3070d38f46dcce188b28230e247bdcfc
  getJoinedRoomMessage :: Main.Message -> GHC.Base.String
  {- Arity: 1,
     Strictness: <L,1*U(A,A,A,A,A,1*U(U,U,U),1*U(U),1*U(U),A,A,A,A,A)> -}
d6a4b582a08a98cfab70564eece23d91
  getValue ::
    GHC.Base.String -> GHC.Base.String -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ (line :: GHC.Base.String)
                   (delimiter :: GHC.Base.String) ->
                 case GHC.List.$w!!
                        @ [GHC.Types.Char]
                        (Data.List.Split.Internals.splitOn
                           @ GHC.Types.Char
                           GHC.Classes.$fEqChar
                           delimiter
                           line)
                        1# of dt { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newByteArray#
                                @ GHC.Prim.RealWorld
                                8#
                                s1 of ds7 { (#,#) ipv ipv1 ->
                         Main.$wouter
                           (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                           Main.getValue1
                           dt
                           0#
                           ipv }) of ds7 { (#,#) ipv ipv1 ->
                 ipv1 } }) -}
afc1874bd7bcc055ab3e1446e67486b2
  getValue1 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4#) -}
45f9cbd525b54bf21aec27e125e99628
  handleChat ::
    Network.Socket.Types.Socket
    -> GHC.Base.Maybe Main.Message
    -> Control.Concurrent.Chan.Chan Main.Message
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><S,1*U><L,1*U(1*U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleChat1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.Maybe Main.Message>_R
                 ->_R <Control.Concurrent.Chan.Chan Main.Message>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
775ab090e186b53d82d5417d596101a3
  handleChat1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.Maybe Main.Message
    -> Control.Concurrent.Chan.Chan Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><S,1*U><L,1*U(1*U,U)><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Base.Maybe Main.Message)
                   (w2 :: Control.Concurrent.Chan.Chan Main.Message)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$whandleChat w1 w2 w3) -}
7ee6820812f555d4911ecf60dae3235d
  handleJoinChatroom ::
    Network.Socket.Types.Socket
    -> GHC.Base.Maybe Main.Message
    -> Control.Concurrent.Chan.Chan Main.Message
    -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,U(U(U),A,A,A,A)><S,1*U><L,1*U(1*U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleJoinChatroom1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.Maybe Main.Message>_R
                 ->_R <Control.Concurrent.Chan.Chan Main.Message>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e24cbd5c52faf72c648f7b8228573771
  handleJoinChatroom1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.Maybe Main.Message
    -> Control.Concurrent.Chan.Chan Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U(U(U),A,A,A,A)><S,1*U><L,1*U(1*U,U)><S,U> -}
0fb2f1f495eaacaa8e4ee05f93f7f408
  handleLeaveChatroom ::
    Network.Socket.Types.Socket
    -> GHC.Base.Maybe Main.Message
    -> Control.Concurrent.Chan.Chan Main.Message
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><S,1*U><L,1*U(A,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleLeaveChatroom1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.Maybe Main.Message>_R
                 ->_R <Control.Concurrent.Chan.Chan Main.Message>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
3a6f30248e9a4ce527a06c54e40c3f87
  handleLeaveChatroom1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.Maybe Main.Message
    -> Control.Concurrent.Chan.Chan Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><S,1*U><L,1*U(A,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (ds7 :: Network.Socket.Types.Socket)
                   (ds8 :: GHC.Base.Maybe Main.Message)
                   (ds9 :: Control.Concurrent.Chan.Chan Main.Message)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds8 of wild {
                   GHC.Base.Nothing -> (# eta, GHC.Tuple.() #)
                   GHC.Base.Just ipv
                   -> Control.Concurrent.Chan.writeChan1
                        @ Main.Message
                        ds9
                        ipv
                        eta }) -}
fa6c52abc08e7c5ec0631aaa2160b921
  joinId :: Main.Message -> GHC.Types.Int
  RecSel Left Main.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,1*U(U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds7 :: Main.Message) ->
                 case ds7 of wild { Main.Message ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                 ds15 }) -}
d5f9fee1c42f7e0c520d4100b5f5a31f
  joinedChatRoom :: Main.Message -> Data.Text.Internal.Text
  RecSel Left Main.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLL),1*U(A,A,A,A,A,1*U(U,U,U),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds7 :: Main.Message) ->
                 case ds7 of wild { Main.Message ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                 ds13 }) -}
ec11b7a452243d14a2ddc09083e64c64
  leftChatroom :: Main.Message -> Data.Text.Internal.Text
  RecSel Left Main.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds7 :: Main.Message) ->
                 case ds7 of wild { Main.Message ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                 ds19 }) -}
7613e4ccc061ead76e0449c2412d834f
  listenForMessagesFromOthers ::
    Network.Socket.Types.Socket
    -> Control.Concurrent.Chan.Chan Main.Message
    -> GHC.Types.Int
    -> GHC.Base.Maybe Main.Message
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,U(U(U),A,A,A,A)><S(SS),1*U(U,U)><L,U(U)><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.listenForMessagesFromOthers1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <Control.Concurrent.Chan.Chan Main.Message>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Base.Maybe Main.Message>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f4502a4d5abeb947fb0fb44960e668bb
  listenForMessagesFromOthers1 ::
    Network.Socket.Types.Socket
    -> Control.Concurrent.Chan.Chan Main.Message
    -> GHC.Types.Int
    -> GHC.Base.Maybe Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(U(U),A,A,A,A)><S(SS),1*U(U,U)><L,U(U)><L,A><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: Control.Concurrent.Chan.Chan Main.Message)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Base.Maybe Main.Message)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { Control.Concurrent.Chan.Chan ww1 ww2 ->
                 Main.$wlistenForMessagesFromOthers w ww1 ww2 w2 w4 }) -}
ddb8f62ec5800507a08c172c7e1b8326
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
e31de4df17add0e1bcbb6333bb77af03
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.$wsocket
                        Network.Socket.Types.AF_INET
                        Network.Socket.Types.Stream
                        0#
                        s of ds7 { (#,#) ipv ipv1 ->
                 case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case Network.Socket.getSocketOption3
                        Network.Socket.setSocketOption2
                        Network.Socket.ReuseAddr
                        ipv of ds8 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) level opt ->
                 case GHC.Prim.newAlignedPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        4#
                        4#
                        ipv2 of ds9 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv5
                        ipv4 of ds10 { (#,#) ipv6 ipv7 ->
                 let {
                   ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv7
                 } in
                 case GHC.Prim.writeInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        ptr
                        0#
                        1#
                        ipv6 of s2 { DEFAULT ->
                 case ww1
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds11 { GHC.Int.I32# ds12 ->
                 case level
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds13 { GHC.Int.I32# ds14 ->
                 case opt
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds15 { GHC.Int.I32# ds16 ->
                 case {__pkg_ccall network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG setsockopt GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Addr#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           GHC.Prim.Int# #)}
                        ds12
                        ds14
                        ds16
                        ptr
                        4#
                        s2 of wild2 { (#,#) ds17 ds18 ->
                 let {
                   $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                     case Network.Socket.$wbind
                            ds11 `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                            ww7
                            Main.main4
                            w of ds19 { (#,#) ipv8 ipv9 ->
                     case Network.Socket.$wlisten
                            ds11 `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                            ww7
                            Main.main3
                            ipv8 of ds20 { (#,#) ipv10 ipv11 ->
                     case GHC.Prim.newMVar#
                            @ GHC.Prim.RealWorld
                            @ (Control.Concurrent.Chan.ChItem Main.Message)
                            ipv10 of ds21 { (#,#) ipv12 ipv13 ->
                     case GHC.Prim.newMVar#
                            @ GHC.Prim.RealWorld
                            @ (GHC.MVar.MVar (Control.Concurrent.Chan.ChItem Main.Message))
                            ipv12 of ds22 { (#,#) ipv14 ipv15 ->
                     let {
                       hole :: GHC.MVar.MVar (Control.Concurrent.Chan.ChItem Main.Message)
                         {- Strictness: m -}
                       = GHC.MVar.MVar
                           @ (Control.Concurrent.Chan.ChItem Main.Message)
                           ipv13
                     } in
                     case GHC.Prim.putMVar#
                            @ GHC.Prim.RealWorld
                            @ (GHC.MVar.MVar (Control.Concurrent.Chan.ChItem Main.Message))
                            ipv15
                            hole
                            ipv14 of s2# { DEFAULT ->
                     case GHC.Prim.newMVar#
                            @ GHC.Prim.RealWorld
                            @ (GHC.MVar.MVar (Control.Concurrent.Chan.ChItem Main.Message))
                            s2# of ds23 { (#,#) ipv16 ipv17 ->
                     case GHC.Prim.putMVar#
                            @ GHC.Prim.RealWorld
                            @ (GHC.MVar.MVar (Control.Concurrent.Chan.ChItem Main.Message))
                            ipv17
                            hole
                            ipv16 of s2#1 { DEFAULT ->
                     Main.$wwaitForConnection
                       ds11 `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                       ww2
                       ww3
                       ww4
                       ww7
                       (Control.Concurrent.Chan.Chan @ Main.Message ipv15 ipv17)
                       (GHC.Types.[] @ Network.Socket.Types.Socket)
                       Main.main2
                       s2#1 } } } } } } } }
                 } in
                 case GHC.Prim.narrow32Int# ds18 of wild3 {
                   DEFAULT
                   -> case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ds17 of s4 { DEFAULT ->
                      $w$j s4 }
                   -1#
                   -> case Foreign.C.Error.throwErrno1
                             @ Foreign.C.Types.CInt
                             Network.Socket.setSocketOption2
                             ds17 of ds19 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ipv8 of s4 { DEFAULT ->
                      $w$j s4 } } } } } } } } } } } } } }) -}
081577a0ad418d8e3e2a5524ec76aaa2
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 25#) -}
5aff556a9b225ae8c261a83d4430ec44
  main3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2#) -}
d6ba81de4a4db4c2cf5f5b3061b873ba
  main4 :: Network.Socket.Types.SockAddr
  {- Unfolding: (Network.Socket.Types.SockAddrInet
                   Main.main5
                   Network.Socket.iNADDR_ANY) -}
95b078803bd5a135f1940b2f8c32d7a3
  main5 :: Network.Socket.Types.PortNumber
  {- Unfolding: (case {__pkg_ccall network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG htons GHC.Prim.Word#
                                                                                                -> GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld
                                                                                                -> (# GHC.Prim.State#
                                                                                                        GHC.Prim.RealWorld,
                                                                                                      GHC.Prim.Word# #)}
                        4243##
                        GHC.Prim.realWorld# of wild1 { (#,#) ds7 ds8 ->
                 (GHC.Word.W16# (GHC.Prim.narrow16Word# ds8))
                   `cast`
                 (Sym (Network.Socket.Types.N:PortNumber[0])) }) -}
da34fc16f29678b2381ba2877ea31869
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
a3b299b16f6f3e32c2b0bbeb6b4d52df
  messageText :: Main.Message -> Data.Text.Internal.Text
  RecSel Left Main.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds7 :: Main.Message) ->
                 case ds7 of wild { Main.Message ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                 ds20 }) -}
dc0233972489967ff8685150b4eb2879
  messageType :: Main.Message -> Data.Text.Internal.Text
  RecSel Left Main.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLL),1*U(1*U(U,U,U),A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds7 :: Main.Message) ->
                 case ds7 of wild { Main.Message ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                 ds8 }) -}
f759b14f836623329a068c98eb8bbad5
  numberOfActiveSockets ::
    [Network.Socket.Types.Socket]
    -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Int
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.numberOfActiveSockets1
                  `cast`
                (<[Network.Socket.Types.Socket]>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R)) -}
17465ac92455ed6f333d61a1ce8f20b9
  numberOfActiveSockets1 ::
    [Network.Socket.Types.Socket]
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U(U)><S,U> -}
08b316a4ad9d30f40e7441ffd4389490
  parseMessage ::
    Data.Text.Internal.Text -> GHC.Base.Maybe Main.Message
  {- Arity: 1, Strictness: <L,1*U(U,U,U)> -}
7b8db7f43209c3508ad3b33e6f0d5a83
  port :: Main.Message -> GHC.Types.Int
  RecSel Left Main.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLL),1*U(A,A,1*U(U),A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds7 :: Main.Message) ->
                 case ds7 of wild { Main.Message ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                 ds10 }) -}
fc0c85fee4e3f799c3988d6ee34d872f
  readAsInt :: Data.Text.Internal.Text -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ (string :: Data.Text.Internal.Text) ->
                 case Text.Read.readEither6
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           Main.readAsInt3
                           (case string of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                            let {
                              end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                            } in
                            letrec {
                              $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                              = \ (ww :: GHC.Prim.Int#) ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.>=# ww end) of wild1 {
                                  GHC.Types.False
                                  -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.geWord# r# 55296##) of wild2 {
                                       GHC.Types.False
                                       -> GHC.Types.:
                                            @ GHC.Types.Char
                                            (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                            ($wunfold (GHC.Prim.+# ww 1#))
                                       GHC.Types.True
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.leWord# r# 56319##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.indexWord16Array#
                                                      dt
                                                      (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                               GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr#
                                                       (GHC.Prim.+#
                                                          (GHC.Prim.+#
                                                             (GHC.Prim.uncheckedIShiftL#
                                                                (GHC.Prim.-#
                                                                   (GHC.Prim.word2Int# r#)
                                                                   55296#)
                                                                10#)
                                                             (GHC.Prim.-#
                                                                (GHC.Prim.word2Int# r#1)
                                                                56320#))
                                                          65536#)))
                                                 ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                  GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                            } in
                            $wunfold dt1 })) of wild {
                   [] -> Main.readAsInt2
                   : x ds7
                   -> case ds7 of wild1 {
                        [] -> x : ipv ipv1 -> Main.readAsInt1 } }) -}
b5184654eda2ddd135fc659a9869076d
  readAsInt1 :: GHC.Types.Int
  {- Strictness: x -}
67b56f2e27c8f48786db915698d2084b
  readAsInt2 :: GHC.Types.Int
  {- Strictness: x -}
fba257cbe0541d5d92ae017d54667df8
  readAsInt3 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: ((GHC.Read.$fReadInt3
                    GHC.Read.$fReadInt_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <GHC.Types.Int>_R)
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
6770a25cfe7b90a59c7b91e7bed93f1e
  roomRef :: Main.Message -> GHC.Types.Int
  RecSel Left Main.Message
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLL),1*U(A,A,A,A,A,A,1*U(U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds7 :: Main.Message) ->
                 case ds7 of wild { Main.Message ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ->
                 ds14 }) -}
51a9140ae7237f78f59d7473714f5cbd
  runServer ::
    (Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)
    -> Control.Concurrent.Chan.Chan Main.Message -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U(U(U),A,A,A,U(U)),A)><L,U(U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runServer1
                  `cast`
                (<(Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)>_R
                 ->_R <Control.Concurrent.Chan.Chan Main.Message>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
725bdab81cdc9af67a367fdcff2882aa
  runServer1 ::
    (Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)
    -> Control.Concurrent.Chan.Chan Main.Message
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U(U(U),A,A,A,U(U)),A)><L,U(U,U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: (Network.Socket.Types.Socket,
                          Network.Socket.Types.SockAddr))
                   (w1 :: Control.Concurrent.Chan.Chan Main.Message)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Network.Socket.Types.MkSocket ww4 ww5 ww6 ww7 ww8 ->
                 Main.$wrunServer ww4 ww8 w1 w2 } }) -}
d09afff47b4c37b6ff51de6f4776d6f4
  waitForConnection ::
    Network.Socket.Types.Socket
    -> Control.Concurrent.Chan.Chan Main.Message
    -> [Network.Socket.Types.Socket]
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U,U)><L,U><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.waitForConnection1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <Control.Concurrent.Chan.Chan Main.Message>_R
                 ->_R <[Network.Socket.Types.Socket]>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f049afef919ae85d8be66351bb75b88f
  waitForConnection1 ::
    Network.Socket.Types.Socket
    -> Control.Concurrent.Chan.Chan Main.Message
    -> [Network.Socket.Types.Socket]
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U,U)><L,U><L,1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: Control.Concurrent.Chan.Chan Main.Message)
                   (w2 :: [Network.Socket.Types.Socket])
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wwaitForConnection ww1 ww2 ww3 ww4 ww7 w1 w2 w3 w4 } }) -}
instance GHC.Show.Show [Main.Message] = Main.$fShowMessage
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

